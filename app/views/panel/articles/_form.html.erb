<form id="fields-for-s3">
  <% @s3_direct_post.fields.map do |name, value| %>
    <input type="hidden" name="<%= name %>" value="<%= value %>" />
  <% end %>
</form>

<%= form_for [:panel, @article], multipart: true, html: { class: "directUpload", remote: true, data: { 'form-data' => (@s3_direct_post.fields), 'url' => @s3_direct_post.url, 'host' => URI.parse(@s3_direct_post.url).host } } do |f| %>

  <% if @article.errors.any? %>  
    <div class="card">
      <h5><%= pluralize(@article.errors.count, "error") %></h5>
      <ul>
        <% @article.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="card admin-form form--article">
    <% if current_user.video_complaints_permission? %>
      <div class="field field--string">
        <label>Sección</label>
        <%= f.select :articable_id, options_for_select(Section.all.collect{ |u| [u.name, u.id] }, @article.articable_id) %>
        <%= f.hidden_field :articable_type, value: "Section" %>
      </div>
    <% else %>
      <div class="field field--string">
        <label>Sección</label>
        <%= f.select :articable_id, options_for_select(Section.where("name != 'Denuncia Global'").collect{ |u| [u.name, u.id] }, @article.articable_id) %>
        <%= f.hidden_field :articable_type, value: "Section" %>
      </div>
    <% end %>

    <% if Author.all.count > 0 %>
      <div class="field field--string">
        <label>Autor de la Nota</label>
        <%= f.select :author_id, options_for_select(Author.all.collect{ |u| [u.name, u.id] }, @article.author_id), prompt: "Selecciona un Autor" %> 
      </div>
    <% end %>  

    <div class="field field--datetime">
      <label>Fecha programada:</label>
      <div class="field">
        <%= f.datetime_select :scheduled_time, datetime_separator: "<span>-</span>", time_separator: "<span>:</span>" %>
      </div>
    </div>

    <% if current_user.is_news_chief? %>
      <div class="field field--string">
        <label for="">Estatus de la nota</label>
        <%= f.select :draft, options_for_select([['Borrador', 0], ['Aprobado', 1], ['No Aprobado', -1], ['Publicar', 2]], @article.draft) %>
      </div>
    <% end %>

    <div class="field field--string">
      <label>Título de la Nota</label>
      <%= f.text_field :name, max_chars: 80, required: true, data: { max_chars: 80 } %>
    </div>

    <div class="field">
      <label>Extracto</label>
      <%= f.text_area :short_description, required: true, data: { max_chars: 120 } %>
    </div>

    <% if @article.image %>
      <div class="field field--string">
        <% if @article.image != "" %>
          <%= image_tag @article.image, class: "form__image-preview shown" %>
        <% end %>
        <label>Imagen principal actual</label>
        <input type="text" disabled value="<%= @article.image %>">
      </div>  
    <% end %>

    <div id="note-editor"></div>
    <%= f.hidden_field :note, id: 'article_note' %>
	<div id="note-editor"></div>
	<%= f.hidden_field :note, id: 'article_note' %>

    <div class="field">
      <label>Exclusiva</label>
      <%= f.select :exclusive, options_for_select([['Sí, esta nota es exclusiva', true], ['No, esta nota no es exclusiva', false]], @article.exclusive) %>
    </div>

    <div class="field">
      <label>Hashtags: </label>
      <%= f.autocomplete_field(:hashtags_names, autocomplete_hashtag_name_panel_hashtags_path, id_element: 'hashtags', class: "search-bar", placeholder: "Por ejemplo: TECNOLOGÍA, PROGRAMACIÓN, NOTICIAS, MÉXICO", type: "search", value: @hashtags, "data-delimiter": ', ', id: 'hashtags') %>
    </div>

    <div class="field field--string">
      <label>Imagen principal</label>
      <%= f.file_field :image, required: true %>
    </div>

    <div class="field field--string">
      <label>Vídeo principal:</label>
      <%= f.text_field :video_url %>
    </div>

    <div class="field field--string">
      <label>Metatags:</label>
      <%= f.text_field :meta_tags %>
    </div>

    <div class="field field--checkbox">
      <label>Último momento:</label>
      <%= f.check_box :breaking_news, id: "breaking_news" %>
    </div>
  </div>
<% end %>

<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
  // Inicialización del editor Quill (versión optimizada)
  if (typeof window.editor === 'undefined') {
    window.editor = new Quill('#note-editor', {
      theme: 'snow',
      modules: {
        toolbar: [
          [{ 'header': [1, 2, 3, false] }],
          ['bold', 'italic', 'underline', 'strike'],
          [{ 'list': 'ordered'}, { 'list': 'bullet' }],
          ['link', 'image'],
          ['clean']
        ],
        clipboard: {
          matchVisual: false // Previene loops de eventos
        }
      },
      placeholder: 'Escribe el contenido de tu artículo aquí...'
    });

    // Cargar contenido existente con protección
    <% if @article.note.present? %>
      try {
        const noteContent = `<%= j @article.note.html_safe %>`;
        if (noteContent.trim() !== '') {
          window.editor.root.innerHTML = noteContent;
        }
      } catch(e) {
        console.error("Error cargando contenido existente:", e);
      }
    <% end %>

    // Manejo robusto del envío del formulario
    const form = document.querySelector('form.directUpload');
    if (form) {
      form.addEventListener('submit', function(e) {
        const contentField = document.querySelector('#article_note');
        if (contentField) {
          contentField.value = JSON.stringify({
            html: window.editor.root.innerHTML,
            delta: window.editor.getContents()
          });
        }
        return true;
      });
    }

    // Sobrescritura segura de submit_form
    if (typeof submit_form === 'function') {
      const originalSubmitForm = submit_form;
      window.submit_form = function(t, e, n, r) {
        try {
          console.log("Contenido Quill:", window.editor.getContents());
          console.log("Texto plano:", window.editor.getText());
          
          const content = window.editor.getContents();
          const text = window.editor.getText();
          
          return originalSubmitForm(t, e, n, r);
        } catch(error) {
          console.error("Error en submit_form:", error);
          return false;
        }
      };
    }

    // Control estricto de caracteres con contadores
    $(function() {
      // Para el título (máximo 80)
      $('#article_name').on('input', function() {
        const currentLength = $(this).val().length;
        if (currentLength > 80) {
          $(this).val($(this).val().substring(0, 80));
        }
        $('#title-counter').text($(this).val().length + '/80');
      }).trigger('input');
      
      // Para el extracto (máximo 120)
      $('#article_short_description').on('input', function() {
        const currentLength = $(this).val().length;
        if (currentLength > 120) {
          $(this).val($(this).val().substring(0, 120));
        }
        $('#excerpt-counter').text($(this).val().length + '/120');
      }).trigger('input');
      
      // Añadir contadores visuales
      $('<span id="title-counter" class="char-counter" style="display:block;font-size:0.8em;color:#666;">0/80</span>').insertAfter('#article_name');
      $('<span id="excerpt-counter" class="char-counter" style="display:block;font-size:0.8em;color:#666;">0/120</span>').insertAfter('#article_short_description');
    });

    // Vista previa de imágenes mejorada
    $("input[type=file]").each(function() {
      const $input = $(this);
      if ($input.parents(".field").find("img").length === 0) {
        $input.before('<img class="form__image-preview" style="display:none;max-width:100%;max-height:150px;margin-bottom:10px;border:1px solid #ddd;">');
      }

      $input.on('change', function() {
        if (this.files && this.files[0]) {
          const reader = new FileReader();
          reader.onload = function(e) {
            $input.parents(".field").find("img")
              .attr('src', e.target.result)
              .css("display", "block");
          };
          reader.readAsDataURL(this.files[0]);
        }
      });
    });
  }
</script>
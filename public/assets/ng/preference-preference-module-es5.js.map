{"version":3,"sources":["webpack:///src/app/models/Preference.ts","webpack:///src/app/pages/panel/preference/preference-routing.module.ts","webpack:///src/app/pages/panel/preference/preference.component.ts","webpack:///src/app/pages/panel/preference/preference.component.html","webpack:///src/app/pages/panel/preference/preference.module.ts","webpack:///src/app/pages/panel/preference/upsert/upsert.component.ts","webpack:///src/app/pages/panel/preference/upsert/upsert.component.html","webpack:///src/app/services/preference.service.ts"],"names":["Preference","routes","path","component","PreferenceRoutingModule","forChild","imports","exports","PreferenceComponent","preferenceService","preferences","all","subscribe","value","id","confirm","selector","templateUrl","styleUrls","PreferenceModule","declarations","providers","UpsertComponent","router","activatedRoute","updateId","snapshot","params","find","formGroupUpsert","key","required","i","controls","markAsDirty","updateValueAndValidity","invalid","newBanner","update","navigate","create","PreferenceService","httpClient","url","apiUrl","get","getHeaders","pipe","err","handleError","length","created_at","toDate","updated_at","request","post"],"mappings":"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","file":"preference-preference-module-es5.js","sourcesContent":["export class Preference {\n  id: number;\n  key: string;\n  value: string;\n  created_at: Date | string;\n  updated_at: Date | string;\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {UpsertComponent} from \"./upsert/upsert.component\";\nimport {PreferenceComponent} from \"./preference.component\";\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PreferenceComponent\n  },\n  {\n    path: 'create',\n    component: UpsertComponent\n  },\n  {\n    path: 'edit/:id',\n    component: UpsertComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class PreferenceRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {Preference} from \"../../../models/Preference\";\nimport {PreferenceService} from \"../../../services/preference.service\";\n\n@Component({\n  selector: 'app-preference',\n  templateUrl: './preference.component.html',\n  styleUrls: ['./preference.component.scss']\n})\nexport class PreferenceComponent implements OnInit {\n\n  preferences: Preference[] = []\n  constructor(private preferenceService: PreferenceService) { }\n\n  ngOnInit(): void {\n    this.preferenceService.all().subscribe(value => {\n      this.preferences = value;\n    })\n  }\n  delete(id: number) {\n    if (confirm('Eliminar preferencia?')) {\n      this.preferenceService.delete(id).subscribe(() => {\n        this.preferenceService.all().subscribe(value => {\n          this.preferences = value;\n        });\n      })\n    }\n  }\n}\n","<div class=\"row mt-2\">\n  <div class=\"col-12 d-flex justify-content-start\">\n    <h2>Banners</h2>\n  </div>\n  <div class=\"col-12 d-flex justify-content-end\">\n    <button routerLink=\"create\" class=\"btn btn-sm btn-primary\">Agregar</button>\n  </div>\n  <div class=\"col-12\">\n    <table class=\"table table-sm\">\n      <thead class=\"thead-dark\">\n      <tr>\n        <th class=\"text-center\" scope=\"col\">Key</th>\n        <th class=\"text-center\" scope=\"col\">Value</th>\n        <th class=\"text-center\" scope=\"col\">Acciones</th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor=\"let item of preferences\">\n        <td class=\"text-center\">{{item.key}}</td>\n        <td class=\"text-center\">{{item.value}}</td>\n        <td class=\"d-flex justify-content-center\">\n          <a routerLink=\"edit/{{item.id}}\"><i class=\"mx-1 fas fa-edit text-secondary\"></i></a>\n          <a style=\"cursor: pointer;\" (click)=\"delete(item.id)\"><i class=\"mx-1 fas fa-trash text-danger\"></i></a></td>\n      </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { PreferenceRoutingModule } from './preference-routing.module';\nimport {PreferenceComponent} from \"./preference.component\";\nimport { UpsertComponent } from './upsert/upsert.component';\nimport {PreferenceService} from \"../../../services/preference.service\";\nimport {ReactiveFormsModule} from \"@angular/forms\";\n\n\n@NgModule({\n  declarations: [PreferenceComponent, UpsertComponent],\n    imports: [\n        CommonModule,\n        PreferenceRoutingModule,\n        ReactiveFormsModule\n    ],\n  exports: [PreferenceComponent, UpsertComponent],\n  providers: [PreferenceService]\n})\nexport class PreferenceModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {BannerService} from \"../../../../services/banner.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {NewBanner} from \"../../../../models/NewBanner\";\nimport {PreferenceService} from \"../../../../services/preference.service\";\nimport {Preference} from \"../../../../models/Preference\";\n\n@Component({\n  selector: 'app-upsert',\n  templateUrl: './upsert.component.html',\n  styleUrls: ['./upsert.component.scss']\n})\nexport class UpsertComponent implements OnInit {\n\n  formGroupUpsert: FormGroup;\n\n  private updateId: number | null = null;\n  constructor(private preferenceService: PreferenceService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    const updateId = this.activatedRoute.snapshot.params['id'];\n    if (updateId) {\n      this.updateId = updateId;\n      this.preferenceService.find(updateId).subscribe(value => {\n\n        this.formGroupUpsert = new FormGroup({\n          key: new FormControl(value.key, [Validators.required]),\n          value: new FormControl(value.value),\n        });\n      });\n    } else {\n      this.formGroupUpsert = new FormGroup({\n        key: new FormControl(null, [Validators.required]),\n        value: new FormControl(null),\n      });\n    }\n  }\n\n  onSubmit() {\n    for (const i in this.formGroupUpsert.controls) {\n      this.formGroupUpsert.controls[i].markAsDirty();\n      this.formGroupUpsert.controls[i].updateValueAndValidity();\n    }\n    if (this.formGroupUpsert.invalid) {\n      return;\n    }\n    const newBanner: Preference = new Preference();\n    newBanner.key = this.formGroupUpsert.controls['key'].value;\n    newBanner.value = this.formGroupUpsert.controls['value'].value;\n\n    if (this.updateId) {\n      this.preferenceService.update(this.updateId, newBanner).subscribe(value => {\n        this.router.navigate(['/panel/preference']);\n      });\n    } else {\n      this.preferenceService.create(newBanner).subscribe(value => {\n        this.router.navigate(['/panel/preference']);\n      });\n    }\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-12 card\" *ngIf=\"formGroupUpsert\" (submit)=\"onSubmit()\">\n    <form [formGroup]=\"formGroupUpsert\">\n      <div class=\"row\">\n        <div class=\"col-12\">\n          <h3>Preferencia</h3>\n        </div>\n        <div class=\"form-group col-12 col-md-6\">\n          <label for=\"inputKey\">Key</label>\n          <input formControlName=\"key\" type=\"text\" class=\"form-control form-control-sm\" id=\"inputKey\" placeholder=\"Key\">\n        </div>\n        <div class=\"form-group col-12 col-md-6\">\n          <label for=\"inputValue\">Value</label>\n          <input type=\"text\" formControlName=\"value\"  class=\"form-control form-control-sm\" id=\"inputValue\" placeholder=\"Value\" />\n        </div>\n        <div class=\"col-12 d-flex justify-content-end\" style=\"margin-top: 150px;\">\n          <button type=\"submit\" class=\"btn btn-sm btn-primary my-2\">Guardar</button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {BaseEndpointService} from \"./base-endpoint.service\";\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {catchError, map} from \"rxjs/operators\";\nimport * as moment from \"moment\";\nimport {Preference} from \"../models/Preference\";\n\n@Injectable()\nexport class PreferenceService extends BaseEndpointService {\n\n  constructor(httpClient: HttpClient) {\n    super(httpClient);\n  }\n\n  all(): Observable<Preference[]> {\n    const url = `${this.apiUrl}/preferences`;\n    return this.httpClient.get<Preference[]>(url, this.getHeaders()).pipe(\n      catchError(err => this.handleError(err)),\n      map<Preference[], Preference[]>(value => {\n        for (let i = 0; i < value.length; i++) {\n          value[i].created_at = moment(value[i].created_at).toDate();\n          value[i].updated_at = moment(value[i].updated_at).toDate();\n        }\n        return value;\n      }));\n  }\n  find(id: number): Observable<Preference> {\n    const url = `${this.apiUrl}/preference/${id}`;\n    return this.httpClient.get<Preference>(url, this.getHeaders()).pipe(\n      catchError(err => this.handleError(err)),\n      map<Preference, Preference>(value => {\n        if (value) {\n          value.created_at = moment(value.created_at).toDate();\n          value.updated_at = moment(value.updated_at).toDate();\n        }\n        return value;\n      }));\n  }\n  create(request: Preference): Observable<Preference> {\n    const url = `${this.apiUrl}/preference`;\n    return this.httpClient.post<Preference>(url, request, this.getHeaders()).pipe(\n      catchError(err => this.handleError(err)),\n      map<Preference, Preference>(value => {\n        if (value) {\n          value.created_at = moment(value.created_at).toDate();\n          value.updated_at = moment(value.updated_at).toDate();\n        }\n        return value;\n      }));\n  }\n  update(id: number, request: Preference): Observable<Preference> {\n    const url = `${this.apiUrl}/preference/${id}`;\n    return this.httpClient.post<Preference>(url, request, this.getHeaders()).pipe(\n      catchError(err => this.handleError(err)),\n      map<Preference, Preference>(value => {\n        if (value) {\n          value.created_at = moment(value.created_at).toDate();\n          value.updated_at = moment(value.updated_at).toDate();\n        }\n        return value;\n      }));\n  }\n  delete(id: number): Observable<Preference> {\n    const url = `${this.apiUrl}/preference/${id}`;\n    return this.httpClient.delete<Preference>(url, this.getHeaders()).pipe(\n      catchError(err => this.handleError(err)),\n      map<Preference, Preference>(value => {\n        if (value) {\n          value.created_at = moment(value.created_at).toDate();\n          value.updated_at = moment(value.updated_at).toDate();\n        }\n        return value;\n      }));\n  }\n}\n"]}